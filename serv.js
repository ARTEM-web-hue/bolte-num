// serv.js ‚Äî –ü–†–û–°–¢–û–ô –ò –ü–†–ê–í–ò–õ–¨–ù–´–ô
const express = require('express');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const app = express();
const PORT = process.env.PORT || 10000;

// üîó –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ RAW-—Ñ–∞–π–ª—ã –≤ GitHub
const VOLT_URL = 'https://raw.githubusercontent.com/ARTEM-web-hue/bolte-num/main/volt.txt';
const NAGRAD_URL = 'https://raw.githubusercontent.com/ARTEM-web-hue/bolte-num/main/nagrad.txt';

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const DATA_FILE = path.join(__dirname, 'players.json');

let players = [];

// === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ volt.txt ===
async function loadPlayers() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ volt.txt...');
    const response = await axios.get(VOLT_URL + '?t=' + Date.now()); // –ë–µ–∑ –∫–µ—à–∞
    const lines = response.data.split('\n');
    const playersMap = {};

    lines.forEach(line => {
      const trimmed = line.trim();
      if (!trimmed || !trimmed.includes(':')) return;

      const [usernamePart, numbersPart] = trimmed.split(':');
      const username = usernamePart.trim();
      if (!username) return;

      // –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞: +100, -50, 20
      const numbers = numbersPart.match(/[+\-]?\d+/g) || [];
      const balance = numbers.reduce((sum, num) => sum + parseInt(num, 10), 0);

      playersMap[username] = { username, balance };
    });

    players = Object.values(playersMap);
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ volt.txt`);

    // üîÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ –∏–ª–∏ –æ—Ç–ª–∞–¥–∫–∏)
    fs.writeFileSync(DATA_FILE, JSON.stringify(players, null, 2), 'utf8');
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ players.json');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ volt.txt:', err.message);

    // –ï—Å–ª–∏ GitHub –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if (fs.existsSync(DATA_FILE)) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏–∑ players.json');
      try {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        players = JSON.parse(data);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞`);
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è players.json:', e);
        players = []; // —Ñ–æ–ª–±—ç–∫
      }
    } else {
      console.log('üÜï –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ...');
      players = [
        { username: "atemmax", balance: 660 },
        { username: "loloky", balance: 76 },
        { username: "hentera", balance: 1200 }
      ];
    }
  }
}

// === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ===
setInterval(loadPlayers, 5 * 60 * 1000);

// === API –¥–ª—è —Å–∞–π—Ç–∞ ===
app.get('/api/players', (req, res) => {
  res.json(players);
});

// === –°—Ç–∞—Ç–∏–∫–∞: index.html, /info –∏ —Ç.–¥. ===
app.use(express.static('public'));

// === /info ‚Äî –∫–∞–∫ —É —Ç–µ–±—è ===
app.get('/info', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>‚ÑπÔ∏è –û –∫–ª—É–±–µ "–°–∞–º–∏ —Å —É—Å–∞–º–∏"</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
      color: white;
      margin: 0;
      padding: 20px;
      text-align: center;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: rgba(0,0,0,0.3);
      padding: 20px;
      border-radius: 15px;
    }
    .btn {
      display: block; margin: 10px auto; width: 90%; padding: 15px;
      background: #2c3e50; color: white; text-decoration: none;
      border-radius: 10px; font-size: 18px;
    }
    .btn-main {
      background: #e67e22; font-weight: bold; font-size: 22px;
    }
    p { font-size: 18px; line-height: 1.6; }
    a { color: #f1c40f; }
  </style>
</head>
<body>
  <div class="container">
    <h1>‚ÑπÔ∏è –û –∫–ª—É–±–µ "–°–∞–º–∏ —Å —É—Å–∞–º–∏"</h1>
    <a href="https://lichess.org/@/Rondom12345678" class="btn">üëë –°–æ–∑–¥–∞—Ç–µ–ª—å</a>
    <a href="https://lichess.org/@/Breshko_Savva" class="btn">ü§ù 1 –ø–æ–º–æ—â–Ω–∏–∫</a>
    <a href="https://lichess.org/@/Mister204" class="btn">ü§ù 2 –ø–æ–º–æ—â–Ω–∏–∫</a>
    <a href="https://lichess.org/@/YaDeni" class="btn">üí™ –¢–∞—â–µ—Ä</a>
    <a href="https://lichess.org/@/atemmax" class="btn">üåü –°—Ç–∞—Ä—ã–π –¥—Ä—É–≥</a>
    <a href="https://lichess.org/team/dNnzQFa3" class="btn btn-main">üèÜ –ö–ª—É–±</a>
    <p>–ú—ã –¥—Ä—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! 100+ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ 13 –¥–Ω–µ–π!</p>
  </div>
</body>
</html>
  `);
});

// === –ó–∞–ø—É—Å–∫ ===
loadPlayers().then(() => {
  app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –ò–≥—Ä–æ–∫–æ–≤: ${players.length}`);
  });
});
