// server.js
const express = require('express');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 10000;

// üîó –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –≤ —Ç–≤–æ—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (RAW!)
const VOLT_URL = 'https://raw.githubusercontent.com/ARTEM-web-hue/bolte-num/main/volt.txt';
const NAGRAD_URL = 'https://raw.githubusercontent.com/ARTEM-web-hue/bolte-num/main/nagrad.txt';

let players = [];

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadPlayers() {
  try {
    const [voltRes, nagradRes] = await Promise.all([
      axios.get(VOLT_URL).catch(() => ({ data: '' })),
      axios.get(NAGRAD_URL).catch(() => ({ data: '' }))
    ]);

    const voltLines = voltRes.data.split('\n');
    const nagradLines = nagradRes.data.split('\n');

    const playersMap = {};

    // –ü–∞—Ä—Å–∏–º volt.txt: —Å—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞
    voltLines.forEach(line => {
      const match = line.trim().match(/^(\w+):\s*(.+)$/);
      if (match) {
        const username = match[1];
        const numbers = match[2].match(/[+\-]?\d+/g) || [];
        const balance = numbers.reduce((sum, num) => sum + parseInt(num), 0);
        playersMap[username] = { username, balance, trophies: [] };
      }
    });

    // –ü–∞—Ä—Å–∏–º nagrad.txt: –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–æ—Ñ–µ–∏
    nagradLines.forEach(line => {
      const match = line.trim().match(/^(\w+):\s*(.+)$/);
      if (match) {
        const username = match[1];
        const trophies = match[2].trim().split(/\s+/).filter(t => t);
        if (playersMap[username]) {
          playersMap[username].trophies = trophies;
        } else if (trophies.length > 0) {
          playersMap[username] = { username, balance: 0, trophies };
        }
      }
    });

    players = Object.values(playersMap);
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    players = []; // fallback
  }
}

// –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
loadPlayers();

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(loadPlayers, 5 * 60 * 1000);

// === API –¥–ª—è —Å–∞–π—Ç–∞ ===
app.get('/api/players', (req, res) => {
  res.json(players);
});

// === –°—Ç–∞—Ç–∏–∫–∞: index.html, /info –∏ —Ç.–¥. ===
app.use(express.static('public'));

// === /info ‚Äî —É–∂–µ –∑–Ω–∞–µ—à—å ===
app.get('/info', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>‚ÑπÔ∏è –û –∫–ª—É–±–µ "–°–∞–º–∏ —Å —É—Å–∞–º–∏"</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
      color: white;
      margin: 0;
      padding: 20px;
      text-align: center;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: rgba(0,0,0,0.3);
      padding: 20px;
      border-radius: 15px;
    }
    .btn {
      display: block; margin: 10px auto; width: 90%; padding: 15px;
      background: #2c3e50; color: white; text-decoration: none;
      border-radius: 10px; font-size: 18px;
    }
    .btn-main {
      background: #e67e22; font-weight: bold; font-size: 22px;
    }
    p { font-size: 18px; line-height: 1.6; }
    a { color: #f1c40f; }
  </style>
</head>
<body>
  <div class="container">
    <h1>‚ÑπÔ∏è –û –∫–ª—É–±–µ "–°–∞–º–∏ —Å —É—Å–∞–º–∏"</h1>
    <a href="https://lichess.org/@/Rondom12345678" class="btn">üëë –°–æ–∑–¥–∞—Ç–µ–ª—å</a>
    <a href="https://lichess.org/@/Breshko_Savva" class="btn">ü§ù 1 –ø–æ–º–æ—â–Ω–∏–∫</a>
    <a href="https://lichess.org/@/Mister204" class="btn">ü§ù 2 –ø–æ–º–æ—â–Ω–∏–∫</a>
    <a href="https://lichess.org/@/YaDeni" class="btn">üí™ –¢–∞—â–µ—Ä</a>
    <a href="https://lichess.org/@/atemmax" class="btn">üåü –°—Ç–∞—Ä—ã–π –¥—Ä—É–≥</a>
    <a href="https://lichess.org/team/dNnzQFa3" class="btn btn-main">üèÜ –ö–ª—É–±</a>
    <p>–ú—ã –¥—Ä—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! 100+ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ 13 –¥–Ω–µ–π!</p>
  </div>
</body>
</html>
  `);
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
